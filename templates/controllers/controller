/** Importation de packages nécessaires */
const pug = require('pug');
const qs = require('querystring');
const moment = require('moment');

/** Importation du model de Todo */
const {{model_name}} = require('../models/{{model_name_minify}}.js');

/** Configuration de moment */
moment.locale('fr');

/** Fonction construisant la page d'accueil */
async function index(req,res) {
    let text = './views/{{model_name_minify}}s/index.pug';
    let renderIndex = pug.compileFile(text);
    let {{model_name_minify}}s = await {{model_name}}.findAll();

    let html = renderIndex({
        title: '{{model_name}}s',
        {{model_name_minify}}s : {{model_name_minify}}s
    });
    console.log(req.query.isdone)
    res.writeHead(200, { 'Content-Type': 'text/html' } )
    res.write(html);
    res.end();
}

/** Fonction construisant la page d'un Todo. */
async function getId{{model_name}}Page(req,res) {
    let {{model_name_minify}}Id = req.params.{{model_name_minify}}Id;
    let text = './views/{{model_name_minify}}s/id{{model_name}}.pug';
    let renderIndex = pug.compileFile(text);
    let {{model_name_minify}} = await {{model_name}}.findOne({
        where: { id: {{model_name_minify}}Id }
    });

    let html = renderIndex({ title: '{{model_name}}s', {{model_name_minify}} : {{model_name_minify}} });

    res.writeHead(200, { 'Content-Type': 'text/html' } )
    res.write(html);
    res.end();
  }

  /** Fonction renvoyant un JSON d'un Todo */
async function getId{{model_name}}Json(req,res) {
    let {{model_name_minify}}Id = req.params.{{model_name_minify}}Id;
    let {{model_name_minify}} = await {{model_name}}.findOne({
        where: { id: {{model_name_minify}}Id }
    });

    res.json({{model_name_minify}});
}

/** Fonction construisant la page de création de Todo */
async function getAdd{{model_name}}Page(req,res) {
    let text = './views/{{model_name_minify}}s/add{{model_name}}.pug';
    let renderAdd = pug.compileFile(text);
    let html = renderAdd({
        title: "Ajout d'un {{model_name}}"
    });

    res.writeHead(200, { 'Content-Type': 'text/html' } )
    res.write(html);
    res.end();
}

/** Fonction construisant la page de modification d'un Todo */
async function getPatch{{model_name}}Page(req,res) {
    let {{model_name_minify}}Id = req.params.{{model_name_minify}}Id;
    let {{model_name_minify}}s = await {{model_name}}.findOne({
        where: { id: {{model_name_minify}}Id }
    });
    let text = './views/{{model_name_minify}}s/edit{{model_name}}.pug';
    let renderEdit = pug.compileFile(text);
    let html = renderEdit({
        title : "Éditer un {{model_name}}",
        {{model_name_minify}} : {{model_name_minify}}s
    });
    res.writeHead(200, { 'Content-Type': 'text/html' } )
    res.write(html);
    res.end();
}

/** Fonction qui ajoute un Todo dans la base. */
async function post{{model_name}}(req,res) {
    let header = req["headers"]["content-type"];
    let json = {
        {{{jsonModel}}}
    }
    {{model_name}}.create(json);
    if(header == "application/json") {        
        res.json(json);
    }
    else {
        return res.redirect(301,"http://localhost:{{port}}/{{model_name_minify}}s");
    }
}

/** Fonction qui supprime un Todo dans la base. */
async function delete{{model_name}}(req,res) {
    let id{{model_name}} = req.params.{{model_name_minify}}Id;
    {{model_name}}.destroy({
        where: {
            id: id{{model_name}}
        }
    });
    let header = req["headers"]["content-type"];
    if(header == "application/json") {
        let json = {
            id:id{{model_name}},
            status:'deleted'
        }
        res.json(json);    
    }
    else {
        return res.redirect(301,'/{{model_name_minify}}s');  
    }
}

/** Fonction qui modifie un Todo dans la base. */
async function patch{{model_name}}(req,res) {
    let header = req["headers"]["content-type"];
    let {{model_name_minify}}Id = req.params.{{model_name_minify}}Id;
    {{model_name}}.update({
        {{{jsonModel}}}
    }, {
    where: {
        id:{{model_name_minify}}Id
        }
    });
    if(header == "application/json") {
        {{model_name_minify}}Controller.getId{{model_name}}Json(req,res);
    }
    else {
        return res.redirect(301, '/{{model_name_minify}}s');        
    }
}

  module.exports = {index, getId{{model_name}}Page, getAdd{{model_name}}Page, getId{{model_name}}Json, 
    getPatch{{model_name}}Page, post{{model_name}}, delete{{model_name}}, patch{{model_name}} };